---
  # Creating AWS EC2 Instances...
- name: Create a sandbox instance
  hosts: localhost
  gather_facts: False
  vars_files:
    - ec2secret/aws-creds.yml
  vars:
    wordpress_ip: 52.51.150.252
    elk_ip: 34.251.177.202
    keypair: mykeypair
    instance_type: t2.micro
    image: ami-1e749f67
    region: eu-west-1
    key_file_location: /vagrant/mykeypair.pem
  tasks:
  - name: Remove the ssh host file
    file:
       path: ~/.ssh/known_hosts
       state: absent
    become: true

  - name: create wordpress security group
    ec2_group:
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        name: "wordpress_sg"
        description: "wordpress security group"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    register: ec2wpsg

  - name: Print all sg variables
    debug: var=ec2wpsg

  - name: Launch wordpress instance
    ec2:
        key_name: "{{ keypair }}"
        group_id: "{{ ec2wpsg.group_id }}"
        count: 1
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        instance_tags:
            Name: wordpress
            Env: dev
    register: ec2wp

  - name: Print all ec2 variables
    debug: var=ec2wp

  - name: Assign ip to wordpress
    ec2_eip:
        region: "{{ region }}"
        device_id: "{{ item }}"
        ip: "{{ wordpress_ip }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
    with_items: "{{ ec2wp.instance_ids }}"

  - name: create elk security group
    ec2_group:
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        name: "elk_sg"
        description: "elk security group"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    register: ec2elksg

  - name: Print all sg variables
    debug: var=ec2elksg

  - name: Wait for the instances to boot by checking the ssh port
    wait_for: host={{wordpress_ip}} port=22 delay=60 timeout=320 state=started
    with_items: "{{ ec2wp.instance_ids }}"

  - name: Launch elk instance
    ec2:
         key_name: "{{ keypair }}"
         group_id: "{{ ec2wpsg.group_id }}"
         count: 1
         aws_access_key: "{{ ec2_access_key }}"
         aws_secret_key: "{{ ec2_secret_key }}"
         instance_type: "{{ instance_type }}"
         image: "{{ image }}"
         wait: true
         region: "{{ region }}"
         instance_tags:
            Name: elk
            Env: dev
    register: ec2elk

  - name: Assign ip to ELK
    ec2_eip:
        region: "{{ region }}"
        device_id: "{{ item }}"
        ip: "{{ elk_ip }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
    with_items: "{{ ec2elk.instance_ids }}"
    
#  - name: Create dynamic inventory
#    add_host: hostname={{ item.public_ip }} group=ec2elk
#    with_items: "{{ ec2elk.tagged_instances }}"

  - name: Wait for the instances to boot by checking the ssh port
    wait_for: host={{elk_ip}} port=22 delay=60 timeout=320 state=started
    with_items: "{{ ec2elk.instance_ids }}"

#######################################################
#               PROVISIONING Java
#######################################################

  - name: Install Java on the elk
    remote_user: ubuntu
    ansible_ssh_private_key_file: "{{ key_file_location }}"
    gather_stats: true
    become: True
    include: java_doc_doccomp.yml
    delegate_to: "{{ elk_ip }}"

  - name: Install Java on the wordpress
    remote_user: ubuntu
    ansible_ssh_private_key_file: "{{ key_file_location }}"
    gather_stats: true
    become: True
    include: java_doc_doccomp.yml
    delegate_to: "{{ wordpress_ip }}"
  
#######################################################
#               PROVISIONING Docker Containers
#######################################################

  - name: Provision Docker Containers on the Servers
    remote_user: ubuntu
    ansible_ssh_private_key_file: "{{ key_file_location }}"
    gather_stats: true
    become: True
    include: shahuscp.yml
    delegate_to: "{{item}}"
    with_items:
        - "{{ elk_ip }}"
        - "{{ wordpress_ip }}"

  
